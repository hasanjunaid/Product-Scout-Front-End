{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SelectCategory() {\n  _s();\n  const [name, setName] = useState(\"\");\n  const [pref, setPref] = useState({\n    'categories': []\n  });\n  const [seain, setSeain] = useState(\"\");\n  const [checkedOptions, setCheckedOptions] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchData = async () => {\n      const storedName = sessionStorage.getItem(\"email\") || \"\";\n      setName(storedName);\n      if (storedName === \"\") {\n        navigate('/login');\n        return;\n      }\n      try {\n        const responsePref = await fetch('http://127.0.0.1:5000/get_all_pref');\n        const bodyPref = await responsePref.json();\n        setPref(bodyPref);\n        const responseCategories = await fetch('http://127.0.0.1:5000/get_all_categories');\n        const bodyCategories = await responseCategories.json();\n        // Do something with bodyCategories if needed\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, [navigate]);\n  const search = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/search', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"name\": seain\n        })\n      });\n      const body = await response.json();\n      // Handle response data if needed\n    } catch (error) {\n      console.error('Error searching:', error);\n    }\n  };\n  const handleCheckboxChange = event => {\n    const {\n      value,\n      checked\n    } = event.target;\n    setCheckedOptions(prevCheckedOptions => {\n      if (checked) {\n        return [...prevCheckedOptions, value];\n      } else {\n        return prevCheckedOptions.filter(option => option !== value);\n      }\n    });\n  };\n  const submit = async () => {\n    navigate('/hotcategories');\n    try {\n      const response = await fetch('http://127.0.0.1:5000/prefset', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"username\": name,\n          \"pref\": checkedOptions\n        })\n      });\n      const body = await response.json();\n      // Handle response body if needed\n    } catch (error) {\n      console.error('Error submitting:', error);\n    }\n  };\n  const handleInputChange = e => {\n    setSeain(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_s(SelectCategory, \"jbx11/bD3cZYcHtkj4RuO/nB58A=\", false, function () {\n  return [useNavigate];\n});\n_c = SelectCategory;\nvar _c;\n$RefreshReg$(_c, \"SelectCategory\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Fragment","_Fragment","jsxDEV","_jsxDEV","SelectCategory","_s","name","setName","pref","setPref","seain","setSeain","checkedOptions","setCheckedOptions","navigate","fetchData","storedName","sessionStorage","getItem","responsePref","fetch","bodyPref","json","responseCategories","bodyCategories","error","console","search","response","method","headers","body","JSON","stringify","handleCheckboxChange","event","value","checked","target","prevCheckedOptions","filter","option","submit","handleInputChange","e","_c","$RefreshReg$"],"sources":["D:/FYP/flask project/Front-End/src/Components/SelectCategory.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport default function SelectCategory() {\r\n    const [name, setName] = useState(\"\");\r\n    const [pref, setPref] = useState({ 'categories': [] });\r\n    const [seain, setSeain] = useState(\"\");\r\n    const [checkedOptions, setCheckedOptions] = useState<string[]>([]);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const storedName = sessionStorage.getItem(\"email\") || \"\";\r\n            setName(storedName);\r\n            if (storedName === \"\") {\r\n                navigate('/login');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const responsePref = await fetch('http://127.0.0.1:5000/get_all_pref');\r\n                const bodyPref = await responsePref.json();\r\n                setPref(bodyPref);\r\n\r\n                const responseCategories = await fetch('http://127.0.0.1:5000/get_all_categories');\r\n                const bodyCategories = await responseCategories.json();\r\n                // Do something with bodyCategories if needed\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n\r\n    }, [navigate]);\r\n\r\n    const search = async () => {\r\n        try {\r\n            const response = await fetch('http://127.0.0.1:5000/search', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'content-type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    \"name\": seain\r\n                }),\r\n            });\r\n            const body = await response.json();\r\n            // Handle response data if needed\r\n        } catch (error) {\r\n            console.error('Error searching:', error);\r\n        }\r\n    };\r\n\r\n    const handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { value, checked } = event.target;\r\n\r\n        setCheckedOptions(prevCheckedOptions => {\r\n            if (checked) {\r\n                return [...prevCheckedOptions, value];\r\n            } else {\r\n                return prevCheckedOptions.filter(option => option !== value);\r\n            }\r\n        });\r\n    };\r\n\r\n    const submit = async () => {\r\n        navigate('/hotcategories');\r\n        try {\r\n            const response = await fetch('http://127.0.0.1:5000/prefset', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'content-type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    \"username\": name,\r\n                    \"pref\": checkedOptions,\r\n                }),\r\n            });\r\n            const body = await response.json();\r\n            // Handle response body if needed\r\n        } catch (error) {\r\n            console.error('Error submitting:', error);\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSeain(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* Your JSX components here */}\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}